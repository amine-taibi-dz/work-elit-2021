<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Printf-style debugging using GDB, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fAUSoz0N0s0/printf-style-debugging-using-gdb-part-1" /><author><name>Kevin Buettner</name></author><id>f51c0dec-7caf-4775-ba1d-f910d0857017</id><updated>2021-10-05T07:00:00Z</updated><published>2021-10-05T07:00:00Z</published><summary type="html">&lt;p&gt;Programmers often debug software by adding print statements to source code. Knowing that a certain point in the program has been reached can be immensely helpful. It's also useful to print values of variables at various points during program execution. An obvious drawback of this technique is the need to change source code, both to add the print statements and later to remove or disable them after the bug has been fixed. Adding new code can potentially introduce new bugs, and if you've added many print statements, you might forget to remove some of them when cleaning up after debugging.&lt;/p&gt; &lt;p&gt;You can use the popular &lt;a href="https://www.gnu.org/software/gdb/"&gt;GNU Project Debugger&lt;/a&gt; (GDB) to perform the same style of debugging for various programming languages, especially &lt;a href="https://developers.redhat.com/topics/c"&gt;C and C++&lt;/a&gt;, without changing source files. This article is the first of a series describing how to use GDB to add print statements to your C and C++ code. We'll start with some basics and move through more advanced ways to call program-defined functions that display data.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To use the techniques described in this article, you need to satisfy the following prerequisites:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;You must have a C/C++ compiler such as &lt;a href="https://gcc.gnu.org/"&gt;GCC&lt;/a&gt; or &lt;a href="https://clang.llvm.org/"&gt;Clang&lt;/a&gt; installed on your development machine.&lt;/li&gt; &lt;li&gt;Likewise, you will need GDB installed on your development machine.&lt;/li&gt; &lt;li&gt;The program that you wish to debug needs to be compiled with debugging information. When using either the &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt; command, add the &lt;code&gt;-g&lt;/code&gt; option to enable debugging information.&lt;/li&gt; &lt;li&gt;The program—or at least the source files on which you wish to use GDB's &lt;code&gt;dprintf&lt;/code&gt; command—should be compiled without optimization.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Regarding the last point, you can disable optimization either by removing any existing &lt;code&gt;-O&lt;/code&gt;, -&lt;code&gt;O2&lt;/code&gt;, etc., options from the set of compiler flags (for example, &lt;code&gt;CFLAGS&lt;/code&gt; or &lt;code&gt;CXXFLAGS&lt;/code&gt;) or by adding either &lt;code&gt;-O0&lt;/code&gt; or &lt;code&gt;-Og&lt;/code&gt; as the very last optimization option. When you run &lt;code&gt;gcc&lt;/code&gt; without specifying any optimization options, &lt;code&gt;-O0&lt;/code&gt; is used as the default. When the program is being compiled with a lot of options, it may be easier to simply append either &lt;code&gt;-O0&lt;/code&gt; or &lt;code&gt;-Og&lt;/code&gt; to the list of compiler options, because the final optimization option overrides any previous optimization options. The &lt;code&gt;-O0&lt;/code&gt; option is slightly different from the &lt;code&gt;-Og&lt;/code&gt; option, because the latter enables some optimizations that won't affect the debugging experience whereas &lt;code&gt;-O0&lt;/code&gt; disables all optimizations.&lt;/p&gt; &lt;p&gt;Note, too, that the latter two points might require you to recompile and relink your program with a debugging option enabled and with optimization disabled.&lt;/p&gt; &lt;p&gt;The techniques presented here might also work for &lt;em&gt;some&lt;/em&gt; optimized code. In recent years, when &lt;code&gt;gcc&lt;/code&gt; is used, the quality of the debugging information has improved greatly for optimized code; however, there are still cases where values of variables are unavailable or possibly even incorrect. Programmers can avoid these problems by disabling optimization.&lt;/p&gt; &lt;h2&gt;Example code&lt;/h2&gt; &lt;p&gt;This article demonstrates the use of GDB to add printf-style output for a little function named &lt;code&gt;insert&lt;/code&gt;. This function is from a small program that I wrote for pedagogical purposes. The program, which is a little over 100 lines long, is contained in a single source file named &lt;code&gt;tree.c&lt;/code&gt; that is available from my &lt;a href="https://github.com/KevinBuettner/tree.c"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The following &lt;code&gt;insert&lt;/code&gt; function inserts a node into a binary search tree. Note the line numbers, which we'll use later in the article:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt; 37 struct node * 38 insert (struct node *tree, char *data) 39 { 40 if (tree == NULL) 41 return alloc_node (NULL, NULL, data); 42 else 43 { 44 int cmp = strcmp (tree-&gt;data, data); 45 46 if (cmp &gt; 0) 47 tree-&gt;left = insert (tree-&gt;left, data); 48 else if (cmp &lt; 0) 49 tree-&gt;right = insert (tree-&gt;right, data); 50 return tree; 51 } 52 } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;main&lt;/code&gt; function contains calls to &lt;code&gt;insert&lt;/code&gt; plus additional calls to functions for printing the tree. Note the line numbers here:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt; 96 struct node *tree = NULL; 97 98 tree = insert (tree, "dog"); 99 tree = insert (tree, "cat"); 100 tree = insert (tree, "wolf"); 101 tree = insert (tree, "javelina"); 102 tree = insert (tree, "gecko"); 103 tree = insert (tree, "coyote"); 104 tree = insert (tree, "scorpion"); 105 106 print_tree_flat (tree); 107 printf ("\n"); 108 print_tree (tree); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I compiled &lt;code&gt;tree.c&lt;/code&gt; for use with GDB using the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ gcc -o tree -g tree.c&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;-g&lt;/code&gt; option places debugging information in the binary. Also, the program is compiled without optimization.&lt;/p&gt; &lt;h2&gt;Using GDB for printf-style output&lt;/h2&gt; &lt;p&gt;With the properly compiled binary on your system, you can simulate print statements in GDB.&lt;/p&gt; &lt;h3&gt;Debugging with GDB&lt;/h3&gt; &lt;p&gt;We can use the &lt;code&gt;gdb&lt;/code&gt; command to debug the example program:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ gdb ./tree&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command starts by printing a copyright message along with legal and help information. If you wish to silence that output, add the &lt;code&gt;-q&lt;/code&gt; option to the &lt;code&gt;gdb&lt;/code&gt; command line. This is what output should look like when using the &lt;code&gt;-q&lt;/code&gt; option:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ gdb -q ./tree Reading symbols from ./tree... (gdb) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you also see the message &lt;code&gt;(No debugging symbols found in ./tree)&lt;/code&gt;, it means that you did not enable the generation of debugging information during the compilation and linking of the program. If this is the case, use GDB's &lt;code&gt;quit&lt;/code&gt; command to exit GDB and fix the problem by recompiling with the &lt;code&gt;-g&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Virtual print statements&lt;/h3&gt; &lt;p&gt;We'll now use GDB's &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Dynamic-Printf.html#Dynamic-Printf"&gt;dprintf command&lt;/a&gt; to place a special kind of breakpoint that simulates the addition of a comparable &lt;code&gt;printf()&lt;/code&gt; statement to the source code. We'll place virtual print statements on lines 41, 47, and 49:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-diff"&gt;(gdb) dprintf 41,"Allocating node for data=%s\n", data Dprintf 1 at 0x401281: file tree.c, line 41. (gdb) dprintf 47,"Recursing left for %s at node %s\n", data, tree-&gt;data Dprintf 2 at 0x4012b9: file tree.c, line 47. (gdb) dprintf 49,"Recursing right for %s at node %s\n", data, tree-&gt;data Dprintf 3 at 0x4012de: file tree.c, line 49. (gdb) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first &lt;code&gt;dprintf&lt;/code&gt; command shown for line &lt;code&gt;41&lt;/code&gt; is roughly equivalent to adding three lines of code near lines 40 and 41:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt; if (tree == NULL) { /* DEBUG - delete later. */ printf ("Allocating node for data=%s\n", data); /* DEBUG - delete later. */ return alloc_node (NULL, NULL, data); } /* DEBUG - delete later. */ &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that, when adding a call to &lt;code&gt;printf()&lt;/code&gt; in the traditional fashion, three lines of code would need to be added in this particular place. (If you added the &lt;code&gt;printf()&lt;/code&gt; without the curly braces, the &lt;code&gt;if&lt;/code&gt; statement would execute only the &lt;code&gt;printf()&lt;/code&gt;, and the &lt;code&gt;return alloc_node&lt;/code&gt; statement would no longer be conditionally executed—instead, it would &lt;em&gt;always&lt;/em&gt; be executed.)&lt;/p&gt; &lt;p&gt;As indicated by the comments, you would need to delete these added lines later when debugging is done (although the added braces are actually fine to leave in place). If you add lots of debugging statements to your code, you might forget to delete some of them when debugging is complete. As noted earlier, this is a distinct advantage of using GDB's &lt;code&gt;dprintf&lt;/code&gt; command: No source code is modified, so subtle bugs won't be introduced when adding the print statement; there's also no need to remember all the places where a print statement was added when cleaning up after debugging.&lt;/p&gt; &lt;h3&gt;Run the program&lt;/h3&gt; &lt;p&gt;Use GDB's &lt;code&gt;run&lt;/code&gt; command to run your program. Once the command is issued, GDB output and program output appear mixed together in the terminal used for the GDB session. Here's an example running our tree program:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-diff"&gt; (gdb) run Starting program: /home/kev/ctests/tree Allocating node for data=dog Recursing left for cat at node dog Allocating node for data=cat Recursing right for wolf at node dog Allocating node for data=wolf Recursing right for javelina at node dog Recursing left for javelina at node wolf Allocating node for data=javelina Recursing right for gecko at node dog Recursing left for gecko at node wolf Recursing left for gecko at node javelina Allocating node for data=gecko Recursing left for coyote at node dog Recursing right for coyote at node cat Allocating node for data=coyote Recursing right for scorpion at node dog Recursing left for scorpion at node wolf Recursing right for scorpion at node javelina Allocating node for data=scorpion cat coyote dog gecko javelina scorpion wolf cat coyote dog gecko javelina scorpion wolf [Inferior 1 (process 306927) exited normally] (gdb) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this display, the user typed the &lt;code&gt;run&lt;/code&gt; command at the &lt;code&gt;(gdb)&lt;/code&gt; prompt. The rest of the lines are output either from GDB or from the program. The only program output occurs towards the end, starting with the line "cat coyote dog..." and finishing with the line "wolf." Lines starting with either "Recursing" or "Allocating" were output by the &lt;code&gt;dprintf&lt;/code&gt; commands established earlier. It's important to understand that, by default, these lines were output by GDB. This is different from traditional printf-style debugging, and we'll look at this difference in the next article in this series. Finally, there are two lines of GDB output, the second line and the penultimate one, which show that the program is starting and exiting.&lt;/p&gt; &lt;h2&gt;Comparing dprintf and printf()&lt;/h2&gt; &lt;p&gt;There are differences and similarities between GDB's &lt;code&gt;dprintf&lt;/code&gt; command and the C-language &lt;code&gt;printf()&lt;/code&gt; function:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The &lt;code&gt;dprintf&lt;/code&gt; command does not use parentheses to group the command's arguments.&lt;/li&gt; &lt;li&gt;The first argument of the &lt;code&gt;dprintf&lt;/code&gt; command specifies a source location at which a dynamic &lt;code&gt;printf&lt;/code&gt; statement should be placed. Output from the dynamic &lt;code&gt;printf&lt;/code&gt; is printed &lt;em&gt;prior to&lt;/em&gt; the execution of that source location. The source location may be a line number, such as &lt;code&gt;41&lt;/code&gt;, but the location will often include a filename plus a line number, such as &lt;code&gt;tree.c:41&lt;/code&gt;. The location could also be the name of a function or an instruction address in the program. For a function location, the output from the dynamic &lt;code&gt;printf&lt;/code&gt; occurs prior to the first executable line of the function. When the location is an instruction address, output occurs before the instruction at that address is executed.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;dprintf&lt;/code&gt; command creates a special kind of breakpoint. It is only when one of these special breakpoints is hit during the program run that output is printed.&lt;/li&gt; &lt;li&gt;The format string used by &lt;code&gt;dprintf&lt;/code&gt; is the same as that used by &lt;code&gt;printf()&lt;/code&gt;. In fact, as we shall see later, the format string specified in the &lt;code&gt;dprintf&lt;/code&gt; command might be passed to a dynamically constructed call to &lt;code&gt;printf()&lt;/code&gt; in the program being debugged.&lt;/li&gt; &lt;li&gt;In both &lt;code&gt;dprintf&lt;/code&gt; and &lt;code&gt;printf()&lt;/code&gt;, comma-separated expressions follow the format string. These are evaluated and output according to the specification provided by the format string.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article has offered the basics of printf-style debugging in GDB. The next article in this series takes you to a higher level of control over debugging, by showing you how to save your &lt;code&gt;dprintf&lt;/code&gt; commands and the GDB output for later use.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/05/printf-style-debugging-using-gdb-part-1" title="Printf-style debugging using GDB, Part 1"&gt;Printf-style debugging using GDB, Part 1&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fAUSoz0N0s0" height="1" width="1" alt=""/&gt;</summary><dc:creator>Kevin Buettner</dc:creator><dc:date>2021-10-05T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/05/printf-style-debugging-using-gdb-part-1</feedburner:origLink></entry><entry><title>JBoss Tools and Red Hat CodeReady Studio for Eclipse 2021-09</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/CkypR9WojZA/12.21.0.ga.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><category term="codereadystudio" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/12.21.0.ga.html</id><updated>2021-10-05T05:54:02Z</updated><published>2021-10-05T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://tools.jboss.org/downloads/jbosstools/2021-09/4.21.0.Final.html"&gt;JBoss Tools 4.21.0&lt;/a&gt; and &lt;a href="https://tools.jboss.org/downloads/devstudio/2021-09/12.21.0.GA.html"&gt;Red Hat CodeReady Studio 12.21.0&lt;/a&gt; for Eclipse 2021-09 are here waiting for you. Check it out!&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/blog/images/crstudio12.png" alt="crstudio12" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="installation"&gt;&lt;a class="anchor" href="#installation"&gt;&lt;/a&gt;Installation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href="https://developers.redhat.com/products/codeready-studio/overview/"&gt;Red Hat CodeReady product page&lt;/a&gt; and run it like this:&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;java -jar codereadystudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release requires at least Eclipse 4.21 (2021-09) but we recommend using the latest &lt;a href="https://www.eclipse.org/downloads/packages/release/2021-09/r/eclipse-ide-enterprise-java-and-web-developers"&gt;Eclipse 4.21 2021-09 JEE Bundle&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;since then you get most of the dependencies preinstalled.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock warning"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-warning" title="Warning"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So make sure to select a Java11 JDK in the installer. You can still work with pre-Java11 JDK/JRE and projects in the tool.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &amp;quot;JBoss Tools&amp;quot; or &amp;quot;Red Hat CodeReady Studio&amp;quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our main focus for this release was an improved tooling for container based development and bug fixing.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="openshift"&gt;&lt;a class="anchor" href="#openshift"&gt;&lt;/a&gt;OpenShift&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="operator-based-services"&gt;&lt;a class="anchor" href="#operator-based-services"&gt;&lt;/a&gt;Operator based services&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When developing cloud native applications on OpenShift, developer may need to launch services (databases, messaging system,…​) that the application under development may need to connect to. The OpenShift tooling allowed to launch such services but it was based on the service catalog which is not available anymore on OpenShift 4.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new feature is based on operators which is the devops way of installing and managing software on Kubernetes clusters. So when you want to launch a service for your application, you will have to choose from the list of installed operators on your cluster and then select type of deployment you want.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the following example, there are two operators installed on our cluster: the &lt;a href="https://strimzi.io"&gt;Strimzi&lt;/a&gt; operator for setting up Kafka clusters on Kubernetes and a Postgresql operator.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For each operator, we can select the type of deployment we want to setup. For each type of deployment, specific parameters may be specified. In this example, we decided to set the replicas number to 4 for a Kafka cluster.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/openshift/images/operator-based-services3.gif" alt="operator based services3" width="80%" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After you’ve entered the name of your service, it will appear in the application explorer view:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/openshift/images/operator-based-services2.png" alt="operator based services2" width="80%" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="hibernate-runtime-provider-updates"&gt;&lt;a class="anchor" href="#hibernate-runtime-provider-updates"&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime providers.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="new-runtime-provider"&gt;&lt;a class="anchor" href="#new-runtime-provider"&gt;&lt;/a&gt;New Runtime Provider&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new runtime provider has been added for Hibernate 5.6. It incorporates Hibernate Core version 5.6.0.Beta2 and Hibernate Tools version 5.6.0.Beta2. This runtime is in preview mode.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.5 runtime provider now incorporates Hibernate Core version 5.5.7.Final and Hibernate Tools version 5.5.7.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.22.Final and Hibernate Tools version 5.3.22.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="platform"&gt;&lt;a class="anchor" href="#platform"&gt;&lt;/a&gt;Platform&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="views-dialogs-and-toolbar"&gt;&lt;a class="anchor" href="#views-dialogs-and-toolbar"&gt;&lt;/a&gt;Views, Dialogs and Toolbar&lt;/h4&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="new-clean-message-dialog-api"&gt;&lt;a class="anchor" href="#new-clean-message-dialog-api"&gt;&lt;/a&gt;New clean message dialog api&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new API in the class PlainMessageDialog is introduced. It uses a builder pattern to create an immutable instance of PlainMessageDialog. It has a clean API and consists of methods for e.g. the button labels, the message and the image.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Example Usage: &lt;code&gt;int answer = PlainMessageDialog.getBuilder(myShell, &amp;quot;The new dialog&amp;quot;).image(SWT.ICON_Question).message(&amp;quot;Like it?&amp;quot;).buttLabels(Arrays.asList(IDialogConstants.YES_LABEL, IDialogConstants.NO_LABEL)).build().open();&lt;/code&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/plain_message_dialog_usage.png" alt="plain message dialog usage" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="accepted-licenses-remembered-permanently"&gt;&lt;a class="anchor" href="#accepted-licenses-remembered-permanently"&gt;&lt;/a&gt;Accepted licenses remembered permanently&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Before accepted licenses were only remembered during runtime and not persisted between restarts. The user selection of accepted licenses is now persisted between restarts.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="export-certificate-during-installation"&gt;&lt;a class="anchor" href="#export-certificate-during-installation"&gt;&lt;/a&gt;Export certificate during installation&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When installing a software into the workbench and the software is signed but with an untrusted certificate, the dialog to review trusted certificates now shows a button to &#x1f4e5; &lt;strong&gt;Export…​&lt;/strong&gt; the selected certificate into their own *.der file. This can facilitate review of the certificate, for example in order to get it audited by some other external service, tool or workflow before approval.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="quick-search-mentions-max-occurrences-reached"&gt;&lt;a class="anchor" href="#quick-search-mentions-max-occurrences-reached"&gt;&lt;/a&gt;Quick Search mentions max occurrences reached&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Quick Search dialog features a label to depict the number of matches that were found. Additionally, if the result set exceeds a now configurable limit, the label shows that the limit has been reached and the search process stops. Besides this new &amp;quot;Max Results&amp;quot; configuration option, the preference page has been overhauled with information decorators to describe the properties in more detail.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/quick-search.png" alt="quick search" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/quick-search-preferences.png" alt="quick search preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="themes-and-styling"&gt;&lt;a class="anchor" href="#themes-and-styling"&gt;&lt;/a&gt;Themes and Styling&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="new-close-icon-on-tabs"&gt;&lt;a class="anchor" href="#new-close-icon-on-tabs"&gt;&lt;/a&gt;New close icon on tabs&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The drawing of the close icon of tabs has been updated to align better with the operating system.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/old-light-x.png" alt="old light x" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/old-dark-x.png" alt="old dark x" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/new-light-x.png" alt="new light x" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/new-dark-x.png" alt="new dark x" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="eclipse-windows-now-supports-dark-theme-tool-tips"&gt;&lt;a class="anchor" href="#eclipse-windows-now-supports-dark-theme-tool-tips"&gt;&lt;/a&gt;Eclipse Windows now supports dark-theme tool-tips&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Eclipse on Windows now support dark-theme tool-tips. Refer below screens-shot which show various tool-tips@dark-theme:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/swt-win-darkthemed-tooltips.png" alt="swt win darkthemed tooltips" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="preferences"&gt;&lt;a class="anchor" href="#preferences"&gt;&lt;/a&gt;Preferences&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="history-for-derived-files"&gt;&lt;a class="anchor" href="#history-for-derived-files"&gt;&lt;/a&gt;History for derived files&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Local history for derived files is now &lt;strong&gt;disabled&lt;/strong&gt; by default. The behaviour can now be configured to the previous (enabled) behaviour in &lt;strong&gt;Preferences &amp;gt; General &amp;gt; Workspace &amp;gt; Local History&lt;/strong&gt; page, by checking the &lt;strong&gt;History for derived files&lt;/strong&gt; checkbox.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Derived files are for example automatically created as the output of java annotation processing or XText. As they are automatically created one could also recreate old versions of the output by compiling older versions of the input, thereby wasting time and space to store the history of the derived files for most users.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/history-for-derived-files-preferences.png" alt="history for derived files preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="general-updates"&gt;&lt;a class="anchor" href="#general-updates"&gt;&lt;/a&gt;General Updates&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="eclipse-support-for-mac-aarch64-arm64"&gt;&lt;a class="anchor" href="#eclipse-support-for-mac-aarch64-arm64"&gt;&lt;/a&gt;Eclipse support for Mac AArch64(Arm64)&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Eclipse SDK downloads for the Mac AArch64(Arm64) architecture are now available. Please note that a Mac AArch64 JVM is required to run Eclipse for Mac AArch64. Eclipse for Mac AArch64 will be formally supported in the Target Environments in a future release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Eclipse and SWT for Mac x86_64 architecture can already run on Apple Silicon hardware under Rosetta translation mode using a x86_64 JVM.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="new-method-create-int-style-in-griddatafactory"&gt;&lt;a class="anchor" href="#new-method-create-int-style-in-griddatafactory"&gt;&lt;/a&gt;New method create(int style) in GridDataFactory&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;GridDataFactory contains a new static method &lt;code&gt;create(int style)&lt;/code&gt; which returns a new GridDataFactory instance. This method is similar to &lt;code&gt;new GridData(int style)&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="minimum-java-version-for-swt"&gt;&lt;a class="anchor" href="#minimum-java-version-for-swt"&gt;&lt;/a&gt;Minimum Java version for SWT&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now requires minimum Java 11 to run SWT.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="ant-1-10-11"&gt;&lt;a class="anchor" href="#ant-1-10-11"&gt;&lt;/a&gt;Ant 1.10.11&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Eclipse has adopted Ant version 1.10.11.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="java-developement-tools-jdt"&gt;&lt;a class="anchor" href="#java-developement-tools-jdt"&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-17-support"&gt;&lt;a class="anchor" href="#java-17-support"&gt;&lt;/a&gt;Java™ 17 Support&lt;/h4&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-17"&gt;&lt;a class="anchor" href="#java-17"&gt;&lt;/a&gt;Java 17&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java 17 is out and Eclipse JDT supports Java 17 in 4.21 via Marketplace.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The release notably includes the following Java 17 features:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;JEP 306: Restore Always-Strict Floating-Point Semantics.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 406: Pattern Matching for switch (Preview).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 409: Sealed Classes (Final).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that preview option should be on for preview language features. For an informal introduction of the support, please refer to &lt;a href="https://wiki.eclipse.org/Java17/Examples"&gt;Java 17 Examples wiki&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-16-support"&gt;&lt;a class="anchor" href="#java-16-support"&gt;&lt;/a&gt;Java™ 16 Support&lt;/h4&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-16"&gt;&lt;a class="anchor" href="#java-16"&gt;&lt;/a&gt;Java 16&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java 16 is out and Eclipse JDT supports Java 16 in 4.20.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The release notably includes the following Java 16 features:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;JEP 394: Pattern Matching for Instanceof (Final).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 395: Records (Final).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 397: Sealed Classes (Second Preview).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that preview option should be on for preview language features. For an informal introduction of the support, please refer to &lt;a href="https://wiki.eclipse.org/Java16/Examples"&gt;Java 16 Examples wiki&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="junit"&gt;&lt;a class="anchor" href="#junit"&gt;&lt;/a&gt;JUnit&lt;/h4&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="mockito-argumentmatchers-added-to-favorites-in-java-tooling"&gt;&lt;a class="anchor" href="#mockito-argumentmatchers-added-to-favorites-in-java-tooling"&gt;&lt;/a&gt;mockito ArgumentMatchers.* added to favorites in Java tooling&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Mockito based tests frequently use &lt;code&gt;org.mockito.ArgumentMatchers.&lt;strong&gt;*&lt;/strong&gt;&lt;/code&gt;. This has been added to the Java favorites in the preferences under &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Content Assist &amp;gt; Favorites&lt;/strong&gt;. This way the organize imports action in the IDE will automatically add static imports for these classes if you use them in your tests.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="bree-update-for-jdt-junit-runtime-bundles"&gt;&lt;a class="anchor" href="#bree-update-for-jdt-junit-runtime-bundles"&gt;&lt;/a&gt;BREE update for JDT JUnit runtime bundles&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The bundle required execution environment (BREE) for the &lt;code&gt;org.eclipse.jdt.junit.runtime&lt;/code&gt; and &lt;code&gt;org.eclipse.jdt.junit4.runtime&lt;/code&gt; bundles is now JavaSE-1.8.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-editor"&gt;&lt;a class="anchor" href="#java-editor"&gt;&lt;/a&gt;Java Editor&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="use-stringbuilder-instead-of-stringbuffer-clean-up"&gt;&lt;a class="anchor" href="#use-stringbuilder-instead-of-stringbuffer-clean-up"&gt;&lt;/a&gt;Use StringBuilder instead of StringBuffer clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that converts code to use &lt;code&gt;StringBuilder&lt;/code&gt; (added in Java 1.5) rather than &lt;code&gt;StringBuffer&lt;/code&gt; which has synchronized methods and is slower than using &lt;code&gt;StringBuilder&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There is a sub-option where changes will only occur to local variables which is on by default. When this sub-option is on, changes will only occur to &lt;code&gt;StringBuffer&lt;/code&gt; variables that are local to a method. When a method calls other methods with such variables or assigns to/from fields/parameters, the method contents will not be converted. It is permitted to append &lt;code&gt;StringBuffer&lt;/code&gt; fields or parameters to local &lt;code&gt;StringBuffer&lt;/code&gt; variables which can then still be converted to &lt;code&gt;StringBuilder&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When the option is selected and the sub-option for local variables is off,all usage of &lt;code&gt;StringBuffer&lt;/code&gt; in the selected files are changed to &lt;code&gt;StringBuilder&lt;/code&gt; regardless of usage. It should be noted that in this case, the clean up will not track down non-selected classes and methods that are referenced and might require changes to compile successfully.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select the &lt;strong&gt;Use StringBuilder instead of StringBuffer&lt;/strong&gt; check box on the &lt;strong&gt;Performance&lt;/strong&gt; tab in your clean up profile. To specify just for local variables, select the &lt;strong&gt;Only for local variables&lt;/strong&gt; check box found just below.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/stringbuffer-to-stringbuilder-prefs.png" alt="stringbuffer to stringbuilder prefs" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/stringbuffer-to-stringbuilder-before.png" alt="stringbuffer to stringbuilder before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/stringbuffer-to-stringbuilder-after.png" alt="stringbuffer to stringbuilder after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="convert-while-to-do-while"&gt;&lt;a class="anchor" href="#convert-while-to-do-while"&gt;&lt;/a&gt;Convert while to do/while&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quick-assist has been added to convert appropriate &lt;strong&gt;while&lt;/strong&gt; loops into &lt;strong&gt;do/while&lt;/strong&gt; loops. Appropriate &lt;strong&gt;while&lt;/strong&gt; loops require the first evaluation of the while expression is guaranteed to be true and that the evaluation is passive.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the following loop:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/while-to-do-while-before.png" alt="while to do while before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One is offered:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/while-to-do-while-after.png" alt="while to do while after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="extract-superclass-enhancement"&gt;&lt;a class="anchor" href="#extract-superclass-enhancement"&gt;&lt;/a&gt;Extract Superclass Enhancement&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;Extract Superclass&lt;/strong&gt; refactoring has been enhanced to support movement of uninitialized non-static final fields. In the past, a warning was issued for extracting uninitialized non-static final fields as the resultant code would be in error. The refactoring has been enhanced to add additional parameters to the moved constructors and to pass initialization values from the original class constructors.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the following class:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/extract-superclass-original-before.png" alt="extract superclass original before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Extracting to Superclass and choosing all fields, one gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/extract-superclass-original-after.png" alt="extract superclass original after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;and&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/extract-superclass-superclass-after.png" alt="extract superclass superclass after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="raw-paste"&gt;&lt;a class="anchor" href="#raw-paste"&gt;&lt;/a&gt;Raw Paste&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new menu item has been added for doing a raw paste when editing Java files. The menu item &lt;strong&gt;Raw Paste&lt;/strong&gt; can be found in the &lt;strong&gt;Edit&lt;/strong&gt; pull-down menu and by right-clicking in the edit window to bring up the context-menu. The menu item performs a paste action but toggles off the smart insert feature, if required, and restores it, if necessary, after the paste. For end-users in smart insert mode, this is the same as doing a &lt;strong&gt;Shift+Ctrl+Insert&lt;/strong&gt; followed by &lt;strong&gt;Ctrl+V&lt;/strong&gt;, followed by &lt;strong&gt;Shift+Ctrl+Insert&lt;/strong&gt; to retoggle into smart insert mode again.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="default-type-filters"&gt;&lt;a class="anchor" href="#default-type-filters"&gt;&lt;/a&gt;Default Type Filters&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Default values have been added to the &lt;strong&gt;Java &amp;gt; Appearance &amp;gt; Type Filters&lt;/strong&gt; preferences. Types matching these filters will be excluded from appearing in the Open Type dialog, content assist, quick fix, and organize imports. These filter patterns do not affect the Package Explorer and Type Hierarchy views.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/default-type-filters.png" alt="default type filters" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="change-project-compliance-and-jre-on-using-multi-constant-case-labels"&gt;&lt;a class="anchor" href="#change-project-compliance-and-jre-on-using-multi-constant-case-labels"&gt;&lt;/a&gt;Change project compliance and JRE on using multi-constant case labels&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quick fix (&lt;strong&gt;Ctrl+1&lt;/strong&gt;) has been added to change the project compliance and JRE when multi-constant case labels are used in a project below Java 14:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/change-compliance-jre-multi-constant-labels.png" alt="change compliance jre multi constant labels" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="quick-fix-to-declare-sealed-interface-as-super-interface"&gt;&lt;a class="anchor" href="#quick-fix-to-declare-sealed-interface-as-super-interface"&gt;&lt;/a&gt;Quick fix to declare sealed interface as super interface&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can use the following quick fix (&lt;strong&gt;Ctrl+1&lt;/strong&gt;) to declare a sealed interface as super interface of its permitted types:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/declare-sealed-interface-as-super-interface.png" alt="declare sealed interface as super interface" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="quick-fix-to-declare-sealed-class-as-super-class"&gt;&lt;a class="anchor" href="#quick-fix-to-declare-sealed-class-as-super-class"&gt;&lt;/a&gt;Quick fix to declare sealed class as super class&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can use the following quick fix (&lt;strong&gt;Ctrl+1&lt;/strong&gt;) to declare a sealed class as super class of its permitted classes:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/declare-sealed-class-as-super-class.png" alt="declare sealed class as super class" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="quick-fix-to-add-the-sub-type-to-permitted-types-of-sealed-super-type"&gt;&lt;a class="anchor" href="#quick-fix-to-add-the-sub-type-to-permitted-types-of-sealed-super-type"&gt;&lt;/a&gt;Quick fix to add the sub type to permitted types of sealed super type&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can use the following quick fix (&lt;strong&gt;Ctrl+1&lt;/strong&gt;) to add a sub type to permitted types of a sealed super type:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/add-subtype-to-permitted-types-of-supertype.png" alt="add subtype to permitted types of supertype" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="better-type-for-the-local-variable-creation-quick-fix"&gt;&lt;a class="anchor" href="#better-type-for-the-local-variable-creation-quick-fix"&gt;&lt;/a&gt;Better type for the local variable creation quick fix&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The quick fix &lt;strong&gt;Create a new local variable&lt;/strong&gt; has been enhanced. When it creates a variable that is the expression on which a foreach loop iterates, its type is an array of the type of the loop parameter:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/foreach-expression-type-before.png" alt="foreach expression type before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/foreach-expression-type-after.png" alt="foreach expression type after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="use-instanceof-clean-up"&gt;&lt;a class="anchor" href="#use-instanceof-clean-up"&gt;&lt;/a&gt;Use instanceof clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that uses an &lt;code&gt;instanceof&lt;/code&gt; expression to check an object against a hardcoded class.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The expression must be a supertype of the targeted class.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Use instanceof keyword instead of Class.isInstance()&lt;/strong&gt; check box on the &lt;strong&gt;Code Style&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/use-instanceof-preferences.png" alt="use instanceof preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/use-instanceof-before.png" alt="use instanceof before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/use-instanceof-after.png" alt="use instanceof after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="operand-factorization-clean-up"&gt;&lt;a class="anchor" href="#operand-factorization-clean-up"&gt;&lt;/a&gt;Operand factorization clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that replaces &lt;code&gt;(X &amp;amp;&amp;amp; Y) || (X &amp;amp;&amp;amp; Z) by (X &amp;amp;&amp;amp; (Y || Y))&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The operands must be passive and primitive.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Replace (X &amp;amp;&amp;amp; Y) || (X &amp;amp;&amp;amp; Z) by (X &amp;amp;&amp;amp; (Y || Z))&lt;/strong&gt; check box on the &lt;strong&gt;Duplicate code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/operand-factorization-preferences.png" alt="operand factorization preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/operand-factorization-before.png" alt="operand factorization before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/operand-factorization-after.png" alt="operand factorization after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="pull-out-a-duplicate-if-from-an-if-else-clean-up"&gt;&lt;a class="anchor" href="#pull-out-a-duplicate-if-from-an-if-else-clean-up"&gt;&lt;/a&gt;Pull out a duplicate &amp;apos;if&amp;apos; from an if/else clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that moves a duplicate inner &lt;code&gt;if&lt;/code&gt; condition around an outer &lt;code&gt;if&lt;/code&gt; condition.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The inner &lt;code&gt;if&lt;/code&gt; condition should be common to both &lt;code&gt;if/else&lt;/code&gt; clauses of the outer &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;if&lt;/code&gt; conditions should be passive.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Pull out a duplicate &amp;apos;if&amp;apos; from an if/else&lt;/strong&gt; check box on the &lt;strong&gt;Duplicate code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/pull-out-if-preferences.png" alt="pull out if preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/pull-out-if-before.png" alt="pull out if before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/pull-out-if-after.png" alt="pull out if after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="one-if-rather-than-duplicate-blocks-that-fall-through-clean-up"&gt;&lt;a class="anchor" href="#one-if-rather-than-duplicate-blocks-that-fall-through-clean-up"&gt;&lt;/a&gt;One if rather than duplicate blocks that fall through clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that merges consecutive &lt;code&gt;if&lt;/code&gt; statements with same code block that end with a jump statement.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Single &amp;apos;if&amp;apos; statement rather than duplicate blocks that fall through&lt;/strong&gt; check box on the &lt;strong&gt;Duplicate code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/one-falling-through-if-before.png" alt="one falling through if before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/one-falling-through-if-after.png" alt="one falling through if after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="uses-string-isblank-clean-up"&gt;&lt;a class="anchor" href="#uses-string-isblank-clean-up"&gt;&lt;/a&gt;Uses String.isBlank() clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that replaces the check of the emptiness of &lt;code&gt;String.strip()&lt;/code&gt; by the use of &lt;code&gt;String.isBlank()&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It avoids the cost of the creation of a stripped string.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You may use Java 11 or higher to use it.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In order to apply this cleanup also to &lt;code&gt;trim().isEmpty()&lt;/code&gt;, you might consider to replace &lt;code&gt;trim()&lt;/code&gt;, which exists since the beginning of Java, with &lt;code&gt;strip()&lt;/code&gt; that has been introduced in Java 11 together with &lt;code&gt;isBlank()&lt;/code&gt;,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;But watch out, &lt;code&gt;trim()&lt;/code&gt; and &lt;code&gt;strip()&lt;/code&gt; differ: &lt;code&gt;trim()&lt;/code&gt; removes leading and trailing characters with an ASCII code up to 32, including some non white space ASCII control characters and missing some Unicode white space characters, whereas &lt;code&gt;strip()&lt;/code&gt; removes all and only leading and trailing white space.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;String.isBlank()` rather than `String.strip().isEmpty()&lt;/strong&gt; check box on the &lt;strong&gt;Optimization&lt;/strong&gt; tab (the &lt;strong&gt;Performance&lt;/strong&gt; tab in Eclipse 2021-09) in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/isblank-preferences.png" alt="isblank preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/isblank-before.png" alt="isblank before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/isblank-after.png" alt="isblank after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="valueof-rather-than-instantiation-clean-up"&gt;&lt;a class="anchor" href="#valueof-rather-than-instantiation-clean-up"&gt;&lt;/a&gt;valueOf() rather than instantiation clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that replaces unnecessary primitive wrappers instance creations by using static factory methods (&lt;code&gt;valueOf()&lt;/code&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It dramatically improves the space performance.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;valueOf() rather than instantiation&lt;/strong&gt; check box on the &lt;strong&gt;Optimization&lt;/strong&gt; tab (the &lt;strong&gt;Performance&lt;/strong&gt; tab in Eclipse 2021-09) in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/valueof-rather-than-instantiation-preferences.png" alt="valueof rather than instantiation preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/valueof-rather-than-instantiation-before.png" alt="valueof rather than instantiation before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/valueof-rather-than-instantiation-after.png" alt="valueof rather than instantiation after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="primitive-rather-than-wrapper-clean-up"&gt;&lt;a class="anchor" href="#primitive-rather-than-wrapper-clean-up"&gt;&lt;/a&gt;Primitive rather than wrapper clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that replaces a primitive wrapper object by the primitive type when an object is not necessary.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The variable must be not &lt;code&gt;null&lt;/code&gt;. The result should not make more autoboxing/unboxing than the original code.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Primitive type rather than wrapper class&lt;/strong&gt; check box on the &lt;strong&gt;Optimization&lt;/strong&gt; tab (the &lt;strong&gt;Performance&lt;/strong&gt; tab in Eclipse 2021-09) in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/primitive-rather-than-wrapper-preferences.png" alt="primitive rather than wrapper preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/primitive-rather-than-wrapper-before.png" alt="primitive rather than wrapper before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/primitive-rather-than-wrapper-after.png" alt="primitive rather than wrapper after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="redundant-truth-clean-up"&gt;&lt;a class="anchor" href="#redundant-truth-clean-up"&gt;&lt;/a&gt;Redundant truth clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that directly checks boolean values instead of comparing them with &lt;code&gt;true/false&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The operator can be equals, not equals or XOR. The constants can be a literal or a &lt;code&gt;java.lang.Boolean&lt;/code&gt; constant. One operand should be primitive so no new &lt;code&gt;null&lt;/code&gt; pointer exceptions may occur.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Boolean value rather than comparison&lt;/strong&gt; check box on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/redundant-truth-preferences.png" alt="redundant truth preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/redundant-truth-before.png" alt="redundant truth before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/redundant-truth-after.png" alt="redundant truth after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="implicit-comparator-clean-up"&gt;&lt;a class="anchor" href="#implicit-comparator-clean-up"&gt;&lt;/a&gt;Implicit comparator clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that removes the comparator declaration if it is the default one.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The declared comparator should be an equivalent to the natural order. It removes anonymous class, lambda, &lt;code&gt;Comparator.comparing()&lt;/code&gt;, &lt;code&gt;Comparator.naturalOrder()&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;. It applies on &lt;code&gt;List.sort(Comparator)&lt;/code&gt;, &lt;code&gt;Collections.sort(List, Comparator)&lt;/code&gt;, &lt;code&gt;Collections.max(Collection, Comparator)&lt;/code&gt; and &lt;code&gt;Collections.min(Collection, Comparator)&lt;/code&gt;. If the comparator is used in the method &lt;code&gt;List.sort(Comparator)&lt;/code&gt;, the method is converted into &lt;code&gt;Collections.sort(List)&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Use implicit comparator when possible&lt;/strong&gt; check box on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/implicit-comparator-preferences.png" alt="implicit comparator preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/implicit-comparator-before.png" alt="implicit comparator before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/implicit-comparator-after.png" alt="implicit comparator after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="initialize-array-with-curly-clean-up"&gt;&lt;a class="anchor" href="#initialize-array-with-curly-clean-up"&gt;&lt;/a&gt;Initialize array with curly clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that replaces the new instance syntax by curly brackets to create an array.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It must be an initialization of a declaration. The declaration must have the same type.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Create array with curly when possible&lt;/strong&gt; check box on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/array-with-curly-preferences.png" alt="array with curly preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/array-with-curly-before.png" alt="array with curly before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/array-with-curly-after.png" alt="array with curly after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="remove-variable-assignment-before-return-clean-up"&gt;&lt;a class="anchor" href="#remove-variable-assignment-before-return-clean-up"&gt;&lt;/a&gt;Remove variable assignment before return clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that removes unnecessary local variable declaration or unnecessary variable assignment before a return statement.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;An explicit type is added for arrays.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Remove variable assignment before return&lt;/strong&gt; check box on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab in your clean up profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/return-without-assignment-preferences.png" alt="return without assignment preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/return-without-assignment-before.png" alt="return without assignment before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/return-without-assignment-after.png" alt="return without assignment after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="replace-system-getproperty-calls-clean-up"&gt;&lt;a class="anchor" href="#replace-system-getproperty-calls-clean-up"&gt;&lt;/a&gt;Replace System.getProperty() calls clean up&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that replaces certain &lt;code&gt;System.getProperty()&lt;/code&gt; calls with alternative Java method calls or constants instead. Using these calls/constants may end up using system defaults (e.g. system default file separator) and thus can no longer be overridden at runtime.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To apply the clean up, select &lt;strong&gt;Replace system property with constant&lt;/strong&gt; check box on the &lt;strong&gt;Java Feature&lt;/strong&gt; tab in your clean up profile. This enables you to check one or more sub-options: &lt;strong&gt;File separator&lt;/strong&gt;, &lt;strong&gt;Path separator&lt;/strong&gt;, &lt;strong&gt;Line separator&lt;/strong&gt;, &lt;strong&gt;File encoding&lt;/strong&gt;, or &lt;strong&gt;Boolean property&lt;/strong&gt;. The last option is used for arbitrary boolean options specified by &lt;strong&gt;-Dsome-arbitrary-option&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/system-properties-preferences.png" alt="system properties preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/system-properties-before.png" alt="system properties before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;One gets:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/system-properties-after.png" alt="system properties after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-compiler"&gt;&lt;a class="anchor" href="#java-compiler"&gt;&lt;/a&gt;Java Compiler&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="find-external-annotations-anywhere"&gt;&lt;a class="anchor" href="#find-external-annotations-anywhere"&gt;&lt;/a&gt;Find external annotations anywhere&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;External annotations, which are used for annotation based null analysis, can now be associated to unannotated classes more freely.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Previously, all external annotations where declared per build path entry. I.e., whenever a project of yours uses a library for which external annotations exist, you would need to explicitly declare where the corresponding external annotations for this particular library can be found.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new compiler preference has been added by which you can instruct the compiler to search for external annotations in all build path locations of the current project.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/external_annotations_all_locations.png" alt="external annotations all locations" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When enabled, this strategy will be applied to all class files encountered during compilation.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Some examples, where this option is useful:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A project A contains generated sources (in a separate source folder), which are decorated using external annotations in the same project. When project A ships a jar containing also the external annotations, any client of A will immediately see the generated classes with their external annotations applied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When dedicated jars have been created, each containing external annotations for a set of libraries, you only have to add these annotation jars to your build path and enable the new option, without worrying which annotation jar corresponds to which individual dependency (dependencies). The compiler will match external annotations to class files with no further help.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For batch compilation a corresponding option already exists. To match the above strategy in CI-builds, just add the following to the compiler command line (verbatim): &lt;code&gt;-annotationpath CLASSPATH&lt;/code&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-views-and-dialogs"&gt;&lt;a class="anchor" href="#java-views-and-dialogs"&gt;&lt;/a&gt;Java Views and Dialogs&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="differentiate-search-filter-for-normal-imports-from-static-imports"&gt;&lt;a class="anchor" href="#differentiate-search-filter-for-normal-imports-from-static-imports"&gt;&lt;/a&gt;Differentiate search filter for normal imports from static imports&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;Search&lt;/strong&gt; view now supports a new filter dedicated for &lt;strong&gt;static imports&lt;/strong&gt;. Consequently, the existing imports filter is dedicated for non-static imports only. As a result, you will now by default find statically imported references of a class or an interface.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/static-import-filter.png" alt="static import filter" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="create-module-info-java-option-during-new-java-project-creation"&gt;&lt;a class="anchor" href="#create-module-info-java-option-during-new-java-project-creation"&gt;&lt;/a&gt;Create module-info.java option during New Java Project creation&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Create module-info.java&lt;/strong&gt; option has been moved to the first page of &lt;strong&gt;New Java Project&lt;/strong&gt; creation wizard. This option will be enabled only for Java projects with JRE 9 or above. New Java Project creation wizard will also remember the previous choice made by the user and select this option by default accordingly.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/create-moduleinfo.png" alt="create moduleinfo" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="default-java-cleanup-profile-of-eclipse-has-been-updated"&gt;&lt;a class="anchor" href="#default-java-cleanup-profile-of-eclipse-has-been-updated"&gt;&lt;/a&gt;Default Java cleanup profile of Eclipse has been updated&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The default cleanup profile of the Java development tools has been updated to include more cleanups. All included cleanups have been well tested and proven to be stable in the Eclipse code base. Please see the preference under &lt;strong&gt;Java &amp;gt; Clean-up&lt;/strong&gt; for details.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/cleanup-profile.png" alt="cleanup profile" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="debug"&gt;&lt;a class="anchor" href="#debug"&gt;&lt;/a&gt;Debug&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="evaluate-variables-in-current-execution-stack"&gt;&lt;a class="anchor" href="#evaluate-variables-in-current-execution-stack"&gt;&lt;/a&gt;Evaluate variables in current execution stack&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In debug mode, regardless of the selected stack frame now you can evaluate variables which are in the scope of the current execution stack frame and stack frames below it which are defined in the current focused java class.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.21/images/debug_eval_intrim_stack.png" alt="debug eval intrim stack" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="copy-run-configuration-item-details"&gt;&lt;a class="anchor" href="#copy-run-configuration-item-details"&gt;&lt;/a&gt;Copy Run Configuration item details&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new &lt;strong&gt;Copy&lt;/strong&gt; button has been added to the &lt;strong&gt;Dependencies/Classpath&lt;/strong&gt; tab of Run Configuration dialog. This can be used to copy the details of the selected item.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/configuration-copyjars.png" alt="configuration copyjars" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="debug-hover-for-chain-of-variables"&gt;&lt;a class="anchor" href="#debug-hover-for-chain-of-variables"&gt;&lt;/a&gt;Debug hover for chain of variables&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When hovering over chain of variables, the debug hover will now show the variable value under the cursor.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/debug_hover_chain_var.png" alt="debug hover chain var" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It even works for array length.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.20/images/debug_hover_array_length.png" alt="debug hover array length" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.19.1.Final.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Having JBoss Tools 4.21.0 and Red Hat CodeReady Studio 12.21.0 out we are already working on the next release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/CkypR9WojZA" height="1" width="1" alt=""/&gt;</content><summary>JBoss Tools 4.21.0 and Red Hat CodeReady Studio 12.21.0 for Eclipse 2021-09 are here waiting for you. Check it out! Installation Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this: java -jar codereadystudio-&lt;installername&gt;.jar JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more: This release requires at least Eclipse 4.21 (2021-09) but we recommend using the latest Eclipse 4.21 2021-09 JEE Bundle since then you get most of the dependencies preinstalled. Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2021-10-05T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/12.21.0.ga.html</feedburner:origLink></entry><entry><title type="html">Beginners Guide to Installing Decision Management Tooling in a Local Container using Podman</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wc6qPdyPEfo/beginners-guide-to-rhpam-local-conainter-podman.html.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/NyUwWP50Fio/beginners-guide-to-rhpam-local-conainter-podman.html.html</id><updated>2021-10-04T05:00:00Z</updated><content type="html"> Recently the open source  announced that there was solid support for using its container tooling to replace docker on your local development machine. Ring in the joyous music and off we go to explore how we can get back to basics without the issues of licensing around the developer desktop container tooling. Note, the rest of this tutorial will be based on the current version of Podman at the time of publication, v3.3.1. The first thing you want to do is just install the Podman tooling, which is fairly painless using BREW: $ brew install podman Now you are ready to kick off the virtual machine with the proper settings to start doing something real, like adding developer decision management tooling to your local machine. You start by initialise and start the virtual machine to run Podman on: $ podman machine init --memory 6144 --disk-size 20 Extracting compressed file Image resized. If it's your first time doing this, an image will be downloaded first, but in this case a cached version of that image is just being unpacked and setup. Now it's time to start the virtual machine: $ podman machine start INFO[0000] waiting for clients... INFO[0000] listening tcp://0.0.0.0:7777 INFO[0000] new connection from to /var/folders/_y/1rjzwypx57sd677v9jzrr0nc0000gp/T/podman/qemu_podman-machine-default.sock Waiting for VM ... qemu-system-x86_64: warning: host doesn't support requested feature: CPUID.80000001H:ECX.svm [bit 2] Now once this completes, you're ready to take a swing at spinning up the developer decision management tooling by Red Hat. First we pull in this nice demo project for installing it locally or in a container: $ git clone https://gitlab.com/bpmworkshop/rhdm-install-demo.git Then go into the rhpdm-install-demo directory and examine the instructions for using this with Podman to spin up the decision management developer tooling in a container. You will note that you need to head over to  and obtain the files listed in the installs/README before you can continue.  Before you try to use Podman to build, pull, or run any images on your machine, verify that the virtual machine is running to support you: $ podman machine list NAME VM TYPE CREATED LAST UP podman-machine-default* qemu 9 minutes ago Currently running Once that's done, you can start from the root directory and build your first image: $ podman build -t rhdm-install:7.11 . ...CUT OUTPUT... STEP 24/26: USER 1000 --&gt; 2a682b0c5aa STEP 25/26: EXPOSE 9990 9999 8080 8001 --&gt; 6a1ed7c4d2e STEP 26/26: CMD ["/opt/jboss/rhdm/jboss-eap-7.3/bin/standalone.sh","-c","standalone.xml","-b", "0.0.0.0","-bmanagement","0.0.0.0"] COMMIT rhpam-install:7.11 --&gt; fbba2e41494 Successfully tagged localhost/rhdm-install:7.11 ce1e4f2a11567442c2c22c8fc2253076c463a154e6696c9fed68bd70e9f4146d This will take some time to execute every line in the provided Dockerfile, so feel free to watch or explore that file until the build process is done. You can verify that you have a new image built: $ podman image list REPOSITORY TAG IMAGE ID CREATED SIZE localhost/rhdm-install 7.11 ce1e4f2a1156 28 sec ago 2.38 GB docker.io/jbossdemocentral/developer latest b73501ac39b1 5 years ago 514 MB You can see the base image is a customised developer image that we then use to build our rhdm-install image.  The next step is to run the image: $ podman run -dt -p 8080:8080 -p 9990:9990 rhdm-install 20a92c865c4a0149779ef70b9a54852ca2168509a7dc7ce8527de015a9895ae7 This starts the image and spins up both Red Hat Enterprise Application Server and running inside of that the Red Hat Decision Management tooling. You can view this by looking up the container id, then viewing the log file to ensure the container startup is completed before using the tooling: $ podman container list CONTAINER ID IMAGE COMMAND CREATED 20a92c865c4a localhost/rhdm-install:7.11 /opt/jboss/rhdm/... 43 sec ago $ podman logs ... CUT OUTPUT OF DUMPED LOG FILE... 14:50:50,612 INFO [org.kie.workbench.common.screens.datasource.management.backend.DataSourceManagementBootstrap] (pool-30-thread-1) Initialize deployments task finished successfully. Note you can use the -f flag to attache the logs output to the console and watch the container start up. Now that it's been started successfully we can make use of the port mapping we did at podman run when we used the -p flag. Port 8080 from our localhost is now mapped through to the containers port.  You can verify this with: $ podman port 20a92c865c4a 8080/tcp -&gt; 0.0.0.0:8080 9990/tcp -&gt; 0.0.0.0:9990 Now you can access the tooling through decision central by logging in at: http://localhost:8080/decision-central The login user: erics The password: redhatdm1! You will be presented with the business central dashboard and you are ready to start automating processes using this tooling in a container on your local machine.  If you need help getting started, try this !&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wc6qPdyPEfo" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/NyUwWP50Fio/beginners-guide-to-rhpam-local-conainter-podman.html.html</feedburner:origLink></entry><entry><title type="html">Business Central SSH Key-Based Authentication</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9mDo66QHbHg/business-central-ssh-key-based-authentication.html" /><author><name>Eder Ignatowicz</name></author><id>https://blog.kie.org/2021/10/business-central-ssh-key-based-authentication.html</id><updated>2021-10-04T05:00:00Z</updated><content type="html">Do you know it is possible to authenticate to Business Central Storage (niogit) using SSH Key-Based Authentication? If you don’t, let’s learn how we can do it in this post. Business Central storage internally is git-based and we also expose cool additional features to more advanced use cases. One of these hidden gems of Business Central is SSH Key-Based Authentication, pretty useful for your CI/CD. To start using SSH Key-Based Authentication in Business Central, under the project settings menu, you can copy the URL for doing SSH operations over your project: For instance, to do a git clone of this project, you can do the following command: git clone ssh://{user}@localhost:8001/MySpace/Course_Scheduling But can we do it using my SSH Keys and without having to type the password? BUSINESS CENTRAL SSH KEY-BASED AUTHENTICATION Yes, and it’s super simple. Go under the BC settings menu (cog icon), click on ‘SSH Keys’, and add your public RSA ssh keys there. As soon as you add your public RSA ssh key for Business Central, you can do a git clone operation without having to inform the user and password: If you don’t have ssh keys, you can create it with the following command: ssh-keygen -t rsa -m PEM Note: You don’t need to provide any passphrases. Keep in mind there are multiple configurations to create your ssh keys. This is just an example of the command. ADVANCED OPTIONS In most of the use cases, users should associate ssh keys to BC users via Business Central UI. But you can also add them manually over the Business Central Key store directory (for instance, in an automated way via i.e. Ansible). By default, BC uses “.security” directory created on the same directory where you launched wildfly/eap. But this can be also configured with a system property “appformer.ssh.keys.storage.folder”. The SSH public keys are stored in the {securityFolderPath}/pkeys/{userName}/ folder structure. As an example, this is the command to me to use /folder/security as my personalized key folder: ./standalone.sh -c standalone-full.xml -Dappformer.ssh.keys.storage.folder=/folder/security To add a new key for a specific user, create a folder inside this directory with the exact user name and add its public keys there. Remember always to restart Business Central if you are doing this process manually. (Note: BC auto-updates SSH Keys if you add it via UI). USING A SPECIFIC KEY DIFFERENT FROM THE LOGGED USER SSH KEY Sometimes, you want to use a different ssh key to auth on Business Central. Let’s see how to do it: ‘C GIT’ AKA COMMAND LINE GIT ‘C git’ is the tool most people use to perform git operations on Linux and OSX. What we want to achieve here is to execute the following command with a specific ssh key. git clone ssh://dora@localhost:8001/MySpace/Course_Scheduling In order to achieve this using ‘C git’, run the following command: GIT_SSH_COMMAND="ssh -i /Users/ederign/dora/dora_ssh_keys/dora_rsa -F /dev/null" git clone ssh://dora@localhost:8001/MySpace/Course_Scheduling We are using localhost here because I’m running Business Central on my local machine. You will need to change this for the same domain that you are trying to connect via ssh. In this example, GIT_SSH_COMMAND is used to personalize the ‘ssh’ command used by git. The -i option specifies the identify file (private key) used and -F cleanup any personalized config file in your environment. If you want to do any other git command, follow the same pattern: GIT_SSH_COMMAND="ssh -i /Users/ederign/dora/dora_ssh_keys/dora_rsa -F /dev/null" git {command here} VIA JGIT You can do the same type of integration using JGit. An executable sample can be found on this . ///usr/bin/env jbang "$0" "$@" ; exit $? //DEPS org.eclipse.jgit:org.eclipse.jgit:5.4.0.201906121030-r //DEPS org.slf4j:slf4j-nop:1.7.31 package me.porcelli.jgit; import com.jcraft.jsch.*; import org.eclipse.jgit.api.CloneCommand; import org.eclipse.jgit.api.Git; import org.eclipse.jgit.transport.JschConfigSessionFactory; import org.eclipse.jgit.transport.SshTransport; import org.eclipse.jgit.transport.OpenSshConfig; import org.eclipse.jgit.util.FS; public class jbang { public static void main(String… args) throws Exception { CloneCommand cloneCommand = Git.cloneRepository(); cloneCommand.setURI( args[0] ); cloneCommand.setTransportConfigCallback(transport –&gt; { final SshTransport sshTransport = (SshTransport) transport; sshTransport.setSshSessionFactory(new JschConfigSessionFactory() { @Override protected void configure(OpenSshConfig.Host host, Session session) {} @Override protected JSch createDefaultJSch(FS fs) throws JSchException { JSch defaultJSch = super.createDefaultJSch( fs ); defaultJSch.addIdentity( "/path/to/private_key" ); return defaultJSch; } }); }); cloneCommand.call(); } } hosted with ❤ by We used JBang to create a simple executable for this script. To install JBang, please use these . After installing it and download our script, you will need to change line 30 for the path of your RSA file. In my case, I changed the line for the following content: defaultJSch.addIdentity("/Users/ederign/dora/dora_ssh_keys/id_rsa"); After this, save the file and do a clone using: jbang jbang.java ssh://dora@localhost:8001/MySpace/Course_Scheduling If you need any further questions, please let us know in the comment section! The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9mDo66QHbHg" height="1" width="1" alt=""/&gt;</content><dc:creator>Eder Ignatowicz</dc:creator><feedburner:origLink>https://blog.kie.org/2021/10/business-central-ssh-key-based-authentication.html</feedburner:origLink></entry><entry><title>New application samples in Red Hat OpenShift 4.8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HINjvhQMsho/new-application-samples-red-hat-openshift-48" /><author><name>Don Schenck</name></author><id>8d369e98-bfc2-4396-83a9-e80383f90894</id><updated>2021-10-01T07:00:00Z</updated><published>2021-10-01T07:00:00Z</published><summary type="html">&lt;p&gt;As &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; continues to evolve and improve, our efforts to promote developer success ramp up as well. The OpenShift developer dashboard provides sample applications that are just a few clicks away from deployment. These samples are spread across a wide range of software development interests and stacks, so you'll probably find one of interest to you.&lt;/p&gt; &lt;p&gt;For OpenShift 4.8, four new samples have been added, while four others have been updated. A total of 14 samples are at hand for the new or curious developer. We'll review all the samples in this article.&lt;/p&gt; &lt;h2&gt;Updated samples&lt;/h2&gt; &lt;p&gt;We've made sure to keep up with version changes in languages and frameworks. We are also increasingly moving from the &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; container base image to &lt;a href="http://products/rhel/ubi"&gt;Red Hat Universal Base Images (UBI)&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;.NET&lt;/h3&gt; &lt;p&gt;The .NET sample application is updated to run on .NET 5 and uses UBI 8 as the base image. The previous sample was .NET Core 3.1 running on Red Hat Enterprise Linux 7 as the base image. Both solutions use the &lt;a href="https://docs.openshift.com/container-platform/4.7/openshift_images/using_images/using-s21-images.html"&gt;Source-to-Image (S2I)&lt;/a&gt; feature of OpenShift and both result in a Linux image running in a Linux container.&lt;/p&gt; &lt;h3&gt;Node.js&lt;/h3&gt; &lt;p&gt;The only change here is a switch from Red Hat Enterprise Linux 7 to UBI 8 as the base image. Both samples use Node.js version 14.&lt;/p&gt; &lt;h3&gt;Python&lt;/h3&gt; &lt;p&gt;This sample contains a minor update from Python 3.8 and UBI 7 to Python 3.9 and UBI 8.&lt;/p&gt; &lt;h3&gt;Ruby&lt;/h3&gt; &lt;p&gt;Both the previous sample and the new sample use UBI 7. Ruby has been updated from version 2.7 to version 3.0.&lt;/p&gt; &lt;h2&gt;New samples&lt;/h2&gt; &lt;p&gt;Many of these samples seek to provide even simpler experiences for new developers.&lt;/p&gt; &lt;h3&gt;Basic Node.js&lt;/h3&gt; &lt;p&gt;This very elementary Node.js application uses &lt;a href="https://expressjs.com"&gt;Express&lt;/a&gt; version 4.17.x. This sample does not use any Red Hat operating system container image as a base image.&lt;/p&gt; &lt;h3&gt;Basic Python&lt;/h3&gt; &lt;p&gt;This very elementary Python "hello world" application does not use any Red Hat operating system container image as a base image.&lt;/p&gt; &lt;h3&gt;Basic Quarkus "hello world" Java application&lt;/h3&gt; &lt;p&gt;This is an excellent example to get started using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; to build container images for OpenShift.&lt;/p&gt; &lt;h3&gt;"Hello world" Java Spring Boot application using Maven&lt;/h3&gt; &lt;p&gt;This elementary "hello world" application for &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt; does not use any Red Hat operating system container image as a base image.&lt;/p&gt; &lt;h2&gt;Unchanged samples&lt;/h2&gt; &lt;p&gt;We continue to offer the following samples, which remain the same as they were in the previous version of OpenShift:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/sclorg/golang-container/blob/master/README.md"&gt;Go on UBI 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/sclorg/httpd-container/blob/master/2.4/README.md"&gt;Apache HTTP Server 2.4 on Red Hat Enterprise Linux 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/jboss-openshift/openshift-quickstarts"&gt;Java using Maven and OpenJDK 11&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/sclorg/nginx-container/blob/master/1.18/README.md"&gt;Nginx HTTP server and a reverse proxy on Red Hat Enterprise Linux 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/sclorg/s2i-perl-container/blob/master/5.30/README.md"&gt;Perl 5.30 on Red Hat Enterprise Linux 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/sclorg/s2i-php-container/blob/master/7.4/README.md"&gt;PHP 7.4 on UBI 8&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Want to try a sample? Or all of them?&lt;/h2&gt; &lt;p&gt;Within minutes you can have a free OpenShift cluster at your command to try any or all of these samples. Simply hop over to the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt; and get your free account. While there, be sure to check out the ever-growing list of &lt;a href="https://developers.redhat.com/developer-sandbox/activities"&gt;sandbox activities&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Let us know want you're looking for&lt;/h2&gt; &lt;p&gt;Want to see more samples? Are we missing some important development stacks? Leave a comment on this article and we'll see what we can do.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/10/01/new-application-samples-red-hat-openshift-48" title="New application samples in Red Hat OpenShift 4.8"&gt;New application samples in Red Hat OpenShift 4.8&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HINjvhQMsho" height="1" width="1" alt=""/&gt;</summary><dc:creator>Don Schenck</dc:creator><dc:date>2021-10-01T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/10/01/new-application-samples-red-hat-openshift-48</feedburner:origLink></entry><entry><title>Better screen resolution with Hyper-V on RHEL 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YCC2VHNVpCM/better-screen-resolution-hyper-v-rhel-8" /><author><name>Don Schenck</name></author><id>88a47688-8d73-4f92-8839-979285a22b30</id><updated>2021-09-30T07:00:00Z</updated><published>2021-09-30T07:00:00Z</published><summary type="html">&lt;p&gt;Let's say you've just downloaded your free copy of &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 8 and created a virtual machine (VM) using &lt;a href="https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-technology-overview"&gt;Microsoft's Hyper-V virtual environment&lt;/a&gt; in Windows. So far, so good. But now you find yourself presented with an old-school 1024x768 screen resolution.&lt;/p&gt; &lt;p&gt;I don't know about you, but I prefer to run my VM in full-screen mode. When I'm using multiple monitors, it's a great convenience (and a powerful feeling) to have one screen running Windows 10 and the other running RHEL.&lt;/p&gt; &lt;p&gt;If you click the right mouse button on the RHEL desktop and look at available screen resolutions, only the default will appear, as shown in Figure 1.&lt;/p&gt; &lt;figure role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/small-screen_0.jpg" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/small-screen_0.jpg?itok=k9_vj2C7" width="1440" height="810" alt="The default screen size for terminal on a Hyper-V virtual machine is just 1024x768." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: The default screen size of a Hyper-V VM on Red Hat Enterprise Linux. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Hunting around in my Hyper-V settings didn't turn up any options, so I thought I might be stuck with a tiny portal into my powerful VM. But then I found a way to change the default.&lt;/p&gt; &lt;h2&gt;How to change the default screen resolution&lt;/h2&gt; &lt;p&gt;Fortunately, there's a simple command in your RHEL VM to improve the screen resolution. In my case, I wanted to run full-screen at a 1920x1080 resolution. The following example shows how to enter a &lt;code&gt;grubby&lt;/code&gt; command as superuser (root), after which you should reboot:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ su # grubby --update-kernel=ALL --args="video=hyperv_fb:1920x1080" # reboot&lt;/code&gt;&lt;/pre&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;fb&lt;/code&gt; in &lt;code&gt;hyperv_fb&lt;/code&gt; stands for &lt;em&gt;frame buffer&lt;/em&gt;, the memory used by the virtual screen driver.&lt;/p&gt; &lt;p&gt;When the machine rebooted, there was my 1920x1080 resolution, in all its screen-hogging glory, as shown in Figure 2.&lt;/p&gt; &lt;figure role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/full-screen_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/full-screen_0.png?itok=LcL2IP7R" width="1440" height="810" alt="After changing the screen size, the terminal takes up the full 1920x1080 size." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: The full screen size on a RHEL virtual machine. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Did we just hack the kernel?&lt;/h2&gt; &lt;p&gt;No, not exactly.&lt;/p&gt; &lt;p&gt;When RHEL boots, it uses a boot loader called &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-working_with_the_grub_2_boot_loader"&gt;grub2&lt;/a&gt;. Grub2 reads information from a configuration file, which in turn refers to a key environment variable. The configuration file is located in the &lt;code&gt;/boot/loader/entries/&lt;/code&gt; directory. Here's that directory on my Red Hat Enterprise Linux 8 VM:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ sudo ls /boot/loader/entries/ a7eef0f4eafb43ae806ac4597d9c4ad8-0-rescue.conf a7eef0f4eafb43ae806ac4597d9c4ad8-4.18.0-305.el8.x86_64.conf&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As the listing shows, there are two entries. One is the rescue mode, while the other is the kernel boot option I normally choose. Here are the contents of that file:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;sudo cat /boot/loader/entries/a7eef0f4eafb43ae806ac4597d9c4ad8-4.18.0-305.el8.x86_64.conf title Red Hat Enterprise Linux (4.18.0-305.el8.x86_64) 8.4 (Ootpa) version 4.18.0-305.el8.x86_64 linux /vmlinuz-4.18.0-305.el8.x86_64 initrd /initramfs-4.18.0-305.el8.x86_64.img $tuned_initrd options $kernelopts $tuned_params id rhel-20210429130346-4.18.0-305.el8.x86_64 grub_users $grub_users grub_arg --unrestricted grub_class kernel &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice the reference to &lt;code&gt;$kernelopts&lt;/code&gt;. This is an environment variable that refers to yet another file, &lt;code&gt;/boot/grub2/grubenv&lt;/code&gt;. The contents of &lt;em&gt;that&lt;/em&gt; file follow:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;sudo cat /boot/grub2/grubenv # GRUB Environment Block saved_entry=a7eef0f4eafb43ae806ac4597d9c4ad8-4.18.0-305.el8.x86_64 kernelopts=root=/dev/mapper/rhel-root ... video=hyperv_fb:1920x1080 boot_success=1 boot_indeterminate=0&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is the file that was modified when we ran the &lt;code&gt;grubby&lt;/code&gt; command. Notice the end of the line that starts with &lt;code&gt;kernelopts&lt;/code&gt;. There's our &lt;code&gt;hyperv_fb&lt;/code&gt; value. (I removed some of that line from the example in order to show the trailing entry.)&lt;/p&gt; &lt;p&gt;And &lt;em&gt;voilà&lt;/em&gt;, we have our screen resolution set to 1920x1080.&lt;/p&gt; &lt;p&gt;Food for thought: Can you use a different setting?&lt;/p&gt; &lt;h2&gt;Final note&lt;/h2&gt; &lt;p&gt;It's often said that, in Unix and Linux, "everything is a file." The procedure in this article only helps to underscore that claim. In this case, one file tweak can change your environment from bothersome to awesome.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/09/30/better-screen-resolution-hyper-v-rhel-8" title="Better screen resolution with Hyper-V on RHEL 8"&gt;Better screen resolution with Hyper-V on RHEL 8&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YCC2VHNVpCM" height="1" width="1" alt=""/&gt;</summary><dc:creator>Don Schenck</dc:creator><dc:date>2021-09-30T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/09/30/better-screen-resolution-hyper-v-rhel-8</feedburner:origLink></entry><entry><title type="html">Process Automation: An Update from the Trenches (Webinar Recording)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/d45lccoREB4/process-automation-an-update-from-the-trenches-webinar-recording.html" /><author><name>Kris Verlaenen</name></author><id>https://blog.kie.org/2021/09/process-automation-an-update-from-the-trenches-webinar-recording.html</id><updated>2021-09-29T09:31:50Z</updated><content type="html">Quick summary: Presentation and demo below ! &#x1f642; A few months ago, we did a set of webinars as part of our event, but for those that might have missed it, the recording is now available! In my session, I gave a bit of an introduction to Process Automation and our journey with jBPM. &gt; Automation has never been more important, but automating business processes &gt; end-to-end comes with many challenges.  Learn how Red Hat Process Automation &gt; Manager has evolved over the years to support the execution of complex &gt; processes at scale.  Hear about the building blocks we offer that make the &gt; life of developers easier and enable easy integration with many other &gt; technologies out there.  We will show you some of the latest improvements, &gt; from event-driven processes to a 100% cloud-native approach to bring your &gt; workloads to the hybrid cloud.  There’s also a live demo included (starting at 30:34). It’s showing an event-driven cloud-native straight-through process, with some focus on developer productivity in VSCode and scalability (buzzword bingo!). Enjoy! Feel free to also take a look at the sessions from Matteo on Decision Automation with DMN and from Geoffrey on vaccination scheduling with Optaplanner . The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/d45lccoREB4" height="1" width="1" alt=""/&gt;</content><dc:creator>Kris Verlaenen</dc:creator><feedburner:origLink>https://blog.kie.org/2021/09/process-automation-an-update-from-the-trenches-webinar-recording.html</feedburner:origLink></entry><entry><title type="html">Better reusability features on BPMN data types</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BRIslPGQcCE/better-reusability-features-on-bpmn-data-types.html" /><author><name>Jaime Enriquez Parada</name></author><id>https://blog.kie.org/2021/09/better-reusability-features-on-bpmn-data-types.html</id><updated>2021-09-29T07:50:36Z</updated><content type="html">The latest addition to our Process Designer is a great feature that enhances the work with formulary data types. We added the ability to define the data type once and use it wherever the data type is needed to be used, as in Process Imports, Process Variables, Global Variables, DataObjects nodes, Multiple Instance Sub-processes and Data Assignments of activities Before this change, users needed to enter it manually in every place in the process designer. Now users can add it anywhere in the Process Designer. Once the data type is defined, if users  want to use it again, they can do so using the dropdowns of each Process Designer widget that allows selection of data type. Data types that are already existing in the process are also offered for selection when modelling or editing the process. For instance, let’s say you want a data object named DataObject of the type com.miType.DataObject, you would enter it as follows: Now, the data object’s data type is available to be selected in the Process Variables section. It will also be available in other places where users are able to select data type for variables, assignments etc. In process variables, you can use the dropdown list box widget to select the already defined Data Type In Global variables, you can use the dropdown list box widget to declare a default type, custom type, or already defined Data Type In Imports, you can use the dropdown list box widget to declare a default type, custom type, or already defined Data Type In Multiple Instances, you can use the dropdown list box widget to declare a default type, custom type, or already defined Data Type Data Assignments Input Data Assignments Output HOW THE SERVICE WORKS The service is composed of Server Side and Client Side components.  The server-side checks for any predefined Data Objects as Assets in the process while the client-side caches in all defined Data Types within the Diagram. In BC, both the server and the client-side work hand in hand, while the Kogito(VSCode extension) build has only the client-side. Regardless of Whether you use it in Business Central or VS Code extension, this feature will surely shorten your Diagram Design Time. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BRIslPGQcCE" height="1" width="1" alt=""/&gt;</content><dc:creator>Jaime Enriquez Parada</dc:creator><feedburner:origLink>https://blog.kie.org/2021/09/better-reusability-features-on-bpmn-data-types.html</feedburner:origLink></entry><entry><title>Secure your Python applications with Thoth recommendations</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KRxGzMs2cBg/secure-your-python-applications-thoth-recommendations" /><author><name>Fridolin Pokorny, Kevin Postlethwait</name></author><id>c7714d67-a94e-4bd3-9c04-d7f105baa955</id><updated>2021-09-29T07:00:00Z</updated><published>2021-09-29T07:00:00Z</published><summary type="html">&lt;p&gt;This article introduces you to using Thoth's security recommender to scan for flaws in your &lt;a href="https://developers.redhat.com/topics/python"&gt;Python&lt;/a&gt; applications. Security checks were recently added in &lt;a href="http://thoth-station.ninja/"&gt;Project Thoth&lt;/a&gt;, a &lt;a href="https://discuss.python.org/t/thoth-an-enhanced-server-side-resolution-offered-to-the-python-community/"&gt;cloud-based resolver for Python applications&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Why we need security recommendations&lt;/h2&gt; &lt;p&gt;Software engineering history has proven countless times that shipping secure software is not easy, and that security problems often lie not in the application developer's code but in imported packages. Software commonly uses libraries written by other developers, and an application's security is dependent on those libraries. If a library has vulnerabilities, the dependent application will inherit them when the library code is executed. Given the complexity and variety of libraries available in the open source world, it is not possible to review all the source code publicly available with rigorous security expertise.&lt;/p&gt; &lt;p&gt;Project Thoth is a native application on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;, hosted on the &lt;a href="https://www.operate-first.cloud/"&gt;Operate First environment&lt;/a&gt;. Thoth can resolve software packages not to the “latest” but to the “greatest” library version. Thoth offers a variety of &lt;a href="https://thoth-station.ninja/recommendation-types/"&gt;recommendation types&lt;/a&gt; to determine the "greatest" version based on different criteria, which guides the installation process. Security is now one of Thoth's recommendation types.&lt;/p&gt; &lt;h2&gt;How Thoth makes security recommendations&lt;/h2&gt; &lt;p&gt;Thoth uses three main sources for security-based advisories that affect Python packages:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;The &lt;a href="https://github.com/pypa/advisory-db"&gt;Python Packaging Advisory Database&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Results computed in Thoth's "security indicators" workflow&lt;/li&gt; &lt;li&gt;&lt;a href="https://openssf.org/blog/2020/11/06/security-scorecards-for-open-source-projects/"&gt;Security scorecards for open source projects&lt;/a&gt; by the &lt;a href="https://openssf.org/"&gt;Open Source Security Foundation (OpenSSF)&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Recently, the &lt;a href="https://www.pypa.io/"&gt;Python Packaging Authority (PyPA)&lt;/a&gt; announced a publicly available database of known vulnerabilities in open source Python libraries, mostly those hosted on the &lt;a href="https://pypi.org/"&gt;Python Package Index (PyPI)&lt;/a&gt;. Thoth’s background data aggregation logic periodically fetches the database of known vulnerabilities and automatically blocks the resolution of &lt;a href="https://thoth-station.ninja/j/cve"&gt;software package versions that are prone to security vulnerabilities&lt;/a&gt;.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Watch &lt;a href="https://www.youtube.com/watch?v=R2i2lF4Ll4g"&gt;this video&lt;/a&gt; for a demonstration of how the resolver flags security problems.&lt;/p&gt; &lt;p&gt;Thoth engineers created the second source of data for security-based advisories. This source uses &lt;a href="https://developers.redhat.com/blog/2021/04/26/continuous-learning-in-project-thoth-using-kafka-and-argo"&gt;Thoth’s data aggregation architecture&lt;/a&gt;, in which each package imported by the application is statically scanned for possible issues using the open source &lt;a href="https://pypi.org/project/bandit/"&gt;Bandit&lt;/a&gt; tool. The information derived by Bandit is used to score packages during resolution. See &lt;a href="https://thoth-station.ninja/docs/developers/adviser/security.html"&gt;Thoth’s security advisories documentation&lt;/a&gt; for more about how Thoth uses Bandit.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=GypRonz01Hg"&gt;This video&lt;/a&gt; demonstrates how the Bandit-based recommendations are computed.&lt;/p&gt; &lt;p&gt;The third source of security-related advisories consists of security scorecards that provide health metrics for open-source software. See the &lt;a href="https://openssf.org/blog/2020/11/06/security-scorecards-for-open-source-projects/"&gt;OpenSSF blog&lt;/a&gt; or the &lt;a href="https://github.com/ossf/scorecard"&gt;OpenSSF GitHub repository&lt;/a&gt; for more about security scorecards.&lt;/p&gt; &lt;p&gt;Thoth’s resolution engine can easily be extended to include more sources of information. We are constantly looking for new sources and mechanisms for scoring packages. If you have domain knowledge in this area, the Thoth team welcomes your contributions and suggestions.&lt;/p&gt; &lt;h2&gt;Get a Thoth security recommendation&lt;/h2&gt; &lt;p&gt;To enable security-based recommendations that include the sources stated earlier, simply configure the recommendation type to be "security" in any of Thoth's three types of client tooling:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The &lt;a href="https://pypi.org/project/thamos/"&gt;Thamos&lt;/a&gt; command-line interface (CLI)&lt;/li&gt; &lt;li&gt;Thoth’s OpenShift &lt;a href="https://github.com/thoth-station/s2i-thoth/"&gt;Source-to-Image (S2I) container images&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://pypi.org/project/jupyterlab-requirements/"&gt;jupyterlab-requirements&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The easiest way to test security-based recommendations is to install the Thamos CLI, configure it, and ask Thoth for an advisory:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ pip install thamos $ thamos config $ thamos add flask $ thamos advise --recommendation-type security&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this example, the cloud-based resolver evaluates versions of Flask as well as its dependencies. It will look for known security issues and suggest the most appropriate versions based on the most recent security knowledge for those dependencies. (See the end of this article for a video demonstration of the resolution process.)&lt;/p&gt; &lt;h2&gt;Using Thoth in the S2I build process&lt;/h2&gt; &lt;p&gt;The Thoth team provides container images that have Thoth tooling to consume recommendations during the OpenShift S2I build process. These container images are hosted on &lt;a href="https://quay.io/organization/thoth-station"&gt;Quay.io&lt;/a&gt; in the thoth-station organization. For the documentation, see the &lt;a href="https://github.com/thoth-station/s2i-thoth"&gt;GitHub repository&lt;/a&gt; hosting Thoth's S2I container images.&lt;/p&gt; &lt;p&gt;To benefit from Thoth’s recommendations in an OpenShift S2I process, use Thoth’s S2I base images during the build process. Because these images are compatible with vanilla S2I container images (in fact, the Thoth images are based on the vanilla ones), all you need to do is change the builder container image used in the S2I build process. The &lt;a href="https://pypi.org/project/thoth-s2i/"&gt;thoth-s2i&lt;/a&gt; tool can facilitate an automated transition to a Thoth-guided S2I build process.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=bOUEEh3u0Ug"&gt;This video&lt;/a&gt; shows the adjusted OpenShift S2I build process with Thoth advisories.&lt;/p&gt; &lt;h2&gt;Watch a video demonstration&lt;/h2&gt; &lt;p&gt;The following video gives an in-depth demonstration of how to resolve Python software packages without security vulnerabilities.&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;h2&gt;Helping the Python community create healthy applications&lt;/h2&gt; &lt;p&gt;As part of Project Thoth, we are accumulating knowledge about Python packages to help Python developers create healthy and secure applications. If you would like to follow updates in the project, please subscribe to the &lt;a href="https://www.youtube.com/channel/UClUIDuq_hQ6vlzmqM59B2Lw"&gt;Thoth Station YouTube channel&lt;/a&gt; or follow us on the &lt;a href="https://twitter.com/thothstation"&gt;@ThothStation Twitter handle&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2021/09/29/secure-your-python-applications-thoth-recommendations" title="Secure your Python applications with Thoth recommendations"&gt;Secure your Python applications with Thoth recommendations&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KRxGzMs2cBg" height="1" width="1" alt=""/&gt;</summary><dc:creator>Fridolin Pokorny, Kevin Postlethwait</dc:creator><dc:date>2021-09-29T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/articles/2021/09/29/secure-your-python-applications-thoth-recommendations</feedburner:origLink></entry><entry><title type="html">Codeanywhere adventures - Getting started with browser based development in containers (part 1)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/N5F8i1B0ELc/codeanywhere-adventures-getting-started-browser-based-development-in-containers-part1.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/w_-D18LhPN8/codeanywhere-adventures-getting-started-browser-based-development-in-containers-part1.html</id><updated>2021-09-29T05:00:00Z</updated><content type="html">Are you ready for some amazing, easy to use, developer tooling that requires not a single tooling installation and no configuration?  That's what the team at are promising us with their cloud IDE when I stumbled on their website last week. They "...don't require you to engage in complex installations and configuration setups. Simply access our in-browser IDE for everything you need to build amazing websites in a productive and more developer-friendly way." Not only that, it's a browser-based developer IDE that ties your coding directly to a pipeline of deployment using containers with immediate friendly tips to access for testing your projects. I'm thinking we need to look at this a bit closer and wanted to share my adventures here with you, starting with part one, getting started. Full disclosure, I know some of the developers behind this product. Initially, I was using the free account they offer that you can spin from the button on the front page, but they reached out and gave me a bit more freedom to explore their offerings. Be sure to , they are a friendly bunch of developers and very happy to process any feedback you might have. HOW IT STARTED This adventure started as I was exploring a replacement for the docker tooling on my local machine, which led me to the tooling. A fine replacement, see my other articles on that exploration, but then I got to looking at how could we showcase our development projects and tooling using a browser only? Enter . Feel free to of this offering on their site, no need for me to determine for you if this is the right fit. I'm interested in Java development and wanted to test this out against one of my simple process automation tooling projects, could I get this into the IDE, build it, and deploy it in their container infrastructure within the bounds of my account? THE DASHBOARD I've chosen to use the Google Chrome browser for all the articles in this series, but it should not really matter so feel free to use your favourite browser. After logging in to the site, you can view. It presents the view to get started and reminds you that you have not yet created your first container. When you create a container you are then staring your first development project, that's end-to-end based on language type selection which will generate a project in your IDE and link that directly to a container to be deployed when you are ready. Before we do that, let's explore what else is available for our use. Under the menu on the right you can select SHARED WITH ME, to see a listing that is currently empty. If you have others you work with, here is where you can share container projects with other developers and you'll find them listed for your access. Pair programming of the future, at the container level! The CONNECTIONS item in the menu allows you to connect to SSH or FTP servers that might be hosing files, products, or projects that you want to be able to access from your IDE projects. Here is where you can add them to integrate them in the  IDE experience. ACCOUNT information includes the ability to connect to other developer services, view resource usage, and more. There is also the ability to create a TEAM ACCOUNT and put together your own CUSTOM STACKS for spinning up in a container where specific tooling versions might be required. Head back over to the CONTAINERS menu item and we'll get started in the next part of this series. So far you've taken a brief look at what this offering is, how to get it setup, and understand what you can do with it. Next up, part two takes us on a tour of setting up our very first container development project in the IDE.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/N5F8i1B0ELc" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/w_-D18LhPN8/codeanywhere-adventures-getting-started-browser-based-development-in-containers-part1.html</feedburner:origLink></entry></feed>
